#This code stain normalizes H&E whole-slide images that match the spatial transcriptomics data and are used as input data for spatial gene expression predictions. 
#It stain normalizes using the improved Reinhard Normalizer from torchstain. Only one sample per time is normalized in this code. Thus, the code can be adapted to normalize all
#existing samples if desired.
#This code requires the H&E whole-slide image which matches the spatial gene expression data generated by spatial transcriptomics (in the project's case in situ sequencing).
#Adjust "XXX" to your needs.

from torchvision import transforms
import torchstain
import cv2
import matplotlib.pyplot as plt
from PIL import Image

#------------------------------------------------------------------------------ 
#Use this line of code so that very large images can be loaded without warning message.
Image.MAX_IMAGE_PIXELS = None

#This is the target image used to stain normalize the H&E whole-slide images from this project. Thus, H&E WSIs were normalized using the improved Reinhard Normalizer
#from torchstain to match the colours from the specific NCT-CRC-HE-100K image tile. Can be adjusted.
target = cv2.cvtColor(cv2.imread("XXX\\NCT-CRC-HE-100K\\NORM\\NORM-ALAYGGQQ.tif"), cv2.COLOR_BGR2RGB) 

#This loads the H&E WSI that should be stain normalized. Adjust the directory and the name of the H&E WSI to be normalized.
to_transform = cv2.cvtColor(cv2.imread("XXX\\XXX.tif"), cv2.COLOR_BGR2RGB) 
#------------------------------------------------------------------------------ 


#Stain Normalization
#------------------------------------------------------------------------------ 
T = transforms.Compose([
    transforms.ToTensor(),
    transforms.Lambda(lambda x: x*255)])
torch_normalizer = torchstain.normalizers.ReinhardNormalizer(backend='torch')
torch_normalizer.fit(T(target))
t_to_transform = T(to_transform)
norm = torch_normalizer.normalize(I=t_to_transform)
#------------------------------------------------------------------------------ 


#Save stain normalized image
#------------------------------------------------------------------------------ 
normalized_image = norm.numpy()

result_torch_save = Image.fromarray(normalized_image)
result_torch_save.save("XXX\\XXX.tif") #Adjust the directory and the name of the H&E WSI to be normalized.
#------------------------------------------------------------------------------ 

#This codefile outputs are: One stain normalized H&E WSI as .tif file.